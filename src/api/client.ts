import axios, { InternalAxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { LoginCredentials, RegisterData, User } from '../types/auth';

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ –ø–æ—Ä—Ç—É 5000
const API_BASE_URL = 'http://localhost:5000/api';

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å axios —Å –±–∞–∑–æ–≤—ã–º URL
const API = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  // –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - 10 —Å–µ–∫—É–Ω–¥
  timeout: 10000,
  // –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫—É–∫–∏ —Å –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
  withCredentials: true,
});

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∫ –∑–∞–ø—Ä–æ—Å–∞–º
API.interceptors.request.use((config: InternalAxiosRequestConfig) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  
  // –ù–µ —É–¥–∞–ª—è–µ–º Content-Type –¥–ª—è multipart/form-data –∑–∞–ø—Ä–æ—Å–æ–≤
  if (config.data instanceof FormData) {
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ FormData - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Type –¥–ª—è multipart/form-data');
    // Axios –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Content-Type –¥–ª—è FormData
  }
  
  console.log(`üöÄ –ó–∞–ø—Ä–æ—Å: ${config.method?.toUpperCase()} ${config.url}`, config.data || '', '–ó–∞–≥–æ–ª–æ–≤–∫–∏:', config.headers);
  return config;
});

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
API.interceptors.response.use(
  (response: AxiosResponse) => {
    console.log(`‚úÖ –û—Ç–≤–µ—Ç: ${response.config.method?.toUpperCase()} ${response.config.url}`, response.data);
    return response;
  },
  (error: AxiosError) => {
    if (error.response) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.config?.method?.toUpperCase()} ${error.config?.url}`, error.response.data);
    } else if (error.request) {
      console.error(`‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${error.config?.method?.toUpperCase()} ${error.config?.url}`, error.message);
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
    return Promise.reject(error);
  }
);

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ API
interface ApiResponse<T> {
  success: boolean;
  data?: T;
  message?: string;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
export const authAPI = {
  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  login: async (credentials: LoginCredentials): Promise<ApiResponse<User>> => {
    try {
      const { data } = await API.post<ApiResponse<User>>('/auth/login', credentials);
      if (data.success && data.data) {
        // –†–µ—à–µ–Ω–∏–µ TypeScript –ø—Ä–æ–±–ª–µ–º—ã
        const userData = data.data as User & { token?: string };
        if (userData.token) {
          localStorage.setItem('token', userData.token);
        }
      }
      return data;
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:', error);
      if (error.response) {
        return { success: false, message: error.response.data.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' };
      }
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' };
    }
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  register: async (userData: RegisterData): Promise<ApiResponse<User>> => {
    try {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', userData);
      const response = await API.post<ApiResponse<User>>('/auth/register', userData);
      console.log('–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', response);
      
      const { data } = response;
      if (data.success && data.data) {
        // –†–µ—à–µ–Ω–∏–µ TypeScript –ø—Ä–æ–±–ª–µ–º—ã
        const user = data.data as User & { token?: string };
        if (user.token) {
          localStorage.setItem('token', user.token);
        }
      }
      return data;
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      if (error.response) {
        return { success: false, message: error.response.data.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' };
      }
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' };
    }
  },

  // –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  logout: (): void => {
    localStorage.removeItem('token');
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCurrentUser: async (): Promise<ApiResponse<User>> => {
    try {
      const { data } = await API.get<ApiResponse<User>>('/auth/me');
      return data;
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      if (error.response) {
        return { success: false, message: error.response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' };
      }
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' };
    }
  },
};

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–Ω–∞–º–∏
export const clansAPI = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∞–Ω–æ–≤
  getClans: async (): Promise<ApiResponse<any[]>> => {
    try {
      const { data } = await API.get<ApiResponse<any[]>>('/clans');
      return data;
    } catch (error: any) {
      if (error.response) {
        return { success: false, message: error.response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–Ω–æ–≤' };
      }
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' };
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–ª–∞–Ω–µ
  getClanById: async (clanId: string): Promise<ApiResponse<any>> => {
    try {
      const { data } = await API.get<ApiResponse<any>>(`/clans/${clanId}`);
      return data;
    } catch (error: any) {
      if (error.response) {
        return { success: false, message: error.response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–∞' };
      }
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' };
    }
  },
};

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
export const eventsAPI = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
  getEvents: async (filters?: any): Promise<ApiResponse<any[]>> => {
    try {
      const { data } = await API.get<ApiResponse<any[]>>('/events', { params: filters });
      return data;
    } catch (error: any) {
      if (error.response) {
        return { success: false, message: error.response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π' };
      }
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' };
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏
  getEventBySlug: async (slug: string): Promise<ApiResponse<any>> => {
    try {
      const { data } = await API.get<ApiResponse<any>>(`/events/${slug}`);
      return data;
    } catch (error: any) {
      if (error.response) {
        return { success: false, message: error.response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è' };
      }
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' };
    }
  },
};

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
export const userAPI = {
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∞–≤–∞—Ç–∞—Ä–∞)
  updateProfile: async (userData: Partial<User>): Promise<ApiResponse<User>> => {
    try {
      const { data } = await API.put<ApiResponse<User>>('/users/profile', userData);
      return data;
    } catch (error: any) {
      if (error.response) {
        return { success: false, message: error.response.data.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' };
      }
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' };
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –∞–≤–∞—Ç–∞—Ä–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º FormData)
  updateProfileWithAvatar: async (formData: FormData): Promise<ApiResponse<User>> => {
    try {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ FormData –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ FormData –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('FormData —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:');
      for (const pair of formData.entries()) {
        console.log(`- ${pair[0]}: ${pair[1] instanceof File ? `–§–∞–π–ª (${(pair[1] as File).name})` : pair[1]}`);
      }
      
      const { data } = await API.put<ApiResponse<User>>('/users/profile/avatar', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–±–∞–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä
        },
      });
      
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞:', data);
      return data;
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞:', error);
      
      if (error.response) {
        console.error('–î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data, '–°—Ç–∞—Ç—É—Å:', error.response.status);
        return { 
          success: false, 
          message: error.response.data.message || `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ (${error.response.status})`
        };
      }
      
      return { 
        success: false, 
        message: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' 
      };
    }
  },

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  changePassword: async (passwordData: { currentPassword: string, newPassword: string }): Promise<ApiResponse<User>> => {
    try {
      const { data } = await API.put<ApiResponse<User>>('/users/password', passwordData);
      return data;
    } catch (error: any) {
      if (error.response) {
        return { success: false, message: error.response.data.message || '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è' };
      }
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' };
    }
  },
}; 